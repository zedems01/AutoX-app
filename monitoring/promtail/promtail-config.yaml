server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # AutoX Backend Application Logs
  - job_name: autox-backend
    static_configs:
      - targets:
          - localhost
        labels:
          job: autox-backend
          app: autox
          component: backend
          __path__: /var/log/autox/*.log
    
    pipeline_stages:
      # Parse timestamp and level from log format: "YYYY-MM-DD HH:MM:SS [LEVEL] message"
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<message>.*)$'
      
      # Convert timestamp to proper format
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05'
      
      # Add level as a label
      - labels:
          level:
      
      # Extract thread_id from message if present
      - regex:
          source: message
          expression: 'thread_id: (?P<thread_id>[a-f0-9-]+)'
      
      # Add thread_id as label if found
      - labels:
          thread_id:
      
      # Extract agent names from message
      - regex:
          source: message
          expression: '(trend_harvester|tweet_searcher|opinion_analyzer|writer|quality_assurer|image_generator|publicator)'
      
      # Drop HTTP request logs (already filtered in Python but extra safety)
      - match:
          selector: '{job="autox-backend"} |~ "(?i)(http|afc)"'
          action: drop

  # System logs (optional - for debugging container issues)
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*log
    
    pipeline_stages:
      - match:
          selector: '{job="varlogs"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\S+\s+\S+\s+\S+) (?P<message>.*)$'
            - labels:
                timestamp:

