pipeline {
    agent any

    options {
        ansiColor('xterm')
        timestamps()
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
    }

    environment {
        FRONTEND_DIR = 'x_automation_app/frontend'
        IMAGE_NAME = 'autox-frontend'
        NODEJS_TOOL = 'node22'
    }

    tools {
        nodejs NODEJS_TOOL
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare Image Tag') {
            steps {
                script {
                    def rawBranch = env.BRANCH_NAME ?: env.GIT_BRANCH ?: 'detached'
                    rawBranch = rawBranch.replaceFirst(/^origin\//, '')
                    rawBranch = rawBranch.replaceAll('/', '-')
                    env.IMAGE_TAG = rawBranch == 'main' ? 'latest' : "dev-${rawBranch}"
                    env.IMAGE_TAG = env.IMAGE_TAG.replaceAll('[^A-Za-z0-9._-]', '-')
                    echo "Resolved image tag: ${env.IMAGE_TAG}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir(env.FRONTEND_DIR) {
                    sh 'npm ci'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir(env.FRONTEND_DIR) {
                    sh 'npm test -- --runInBand'
                }
            }
        }

        stage('Build App') {
            steps {
                dir(env.FRONTEND_DIR) {
                    sh 'npm run build'
                }
            }
        }

        stage('Docker Build & Push') {
            when {
                expression { fileExists("${env.FRONTEND_DIR}/Dockerfile") }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-autox', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    dir(env.FRONTEND_DIR) {
                        sh '''
                            set -e
                            REGISTRY=${DOCKERHUB_NAMESPACE:-$DOCKERHUB_USERNAME}
                            echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
                            docker build -t "$REGISTRY"/${IMAGE_NAME}:${IMAGE_TAG} .
                            docker push "$REGISTRY"/${IMAGE_NAME}:${IMAGE_TAG}
                        '''
                    }
                }
            }

            post {
                always {
                    sh 'docker logout || true'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                dir(env.FRONTEND_DIR) {
                    archiveArtifacts artifacts: '.next/standalone/**', allowEmptyArchive: true
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}


